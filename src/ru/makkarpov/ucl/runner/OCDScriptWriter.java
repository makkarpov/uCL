package ru.makkarpov.ucl.runner;

import ru.makkarpov.ucl.Utils;

import java.io.*;
import java.nio.charset.StandardCharsets;

public class OCDScriptWriter {
    public static final class OCDScriptConfig {
        public int gdbPort;
        public File executableFile;
        public boolean resetHalt, shutdown;
        public String gdbStartMarker;
    }

    public static File writeScript(OCDRunConfiguration config, OCDScriptConfig scriptConfig) throws IOException {
        File ret = null;
        try {
            ret = File.createTempFile("openocd_script_", ".tcl");

            try (PrintWriter w = new PrintWriter(new OutputStreamWriter(new FileOutputStream(ret), StandardCharsets.UTF_8))) {
                w.println("# OpenOCD startup script");
                w.println("# Generated by uCL");
                w.println("");

                w.println("gdb_port " + scriptConfig.gdbPort);
                w.println("tcl_port disabled");
                w.println("telnet_port disabled");

                if (!config.script.isEmpty()) {
                    w.println("");
                    w.println("# User script supplied as parameter");
                    w.println(config.script);
                    w.println("");
                    w.println("# Generated by uCL");
                    w.println("");
                }

                w.println("init");

                if (config.uploadFirmware) {
                    w.println("halt");
                    w.println("wait_halt 1000");
                    w.println("program " + Utils.tclEscape(scriptConfig.executableFile.getCanonicalPath()) + " verify");
                    w.println(scriptConfig.resetHalt ? "reset halt" : "reset run");
                }

                if (scriptConfig.gdbStartMarker != null) {
                    w.println("");
                    w.println("echo " + Utils.tclEscape(scriptConfig.gdbStartMarker));
                }

                if (scriptConfig.shutdown) {
                    w.println("shutdown");
                }
            }
        } catch (IOException e) {
            if (ret != null && !ret.delete()) {
                ret.deleteOnExit();
            }

            throw e;
        }

        return ret;
    }
}
